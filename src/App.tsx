import { useState, useRef } from 'react';
import { QRCodeCanvas } from 'qrcode.react';
import './App.css';

// Content for How to Use
const howToUseContent = `
### How to Use QReasy:

1.  **Select QR Type**: Choose the type of QR code you want to create from the dropdown menu (e.g., URL, Text, Wi-Fi, Event, Menu).
2.  **Enter Your Data**: Fill in the required information for your chosen QR code type in the fields that appear.
3.  **Customize (Optional)**: 
    1.  Pick a color for your QR code (use a preset palette or choose a custom color).
    2.  Choose a background color (use a preset palette or choose a custom color).
    3.  Upload a logo to embed in the center (make sure it's clear and not too complex!).
    4.  Adjust the logo size using the slider.
4.  **Preview**: See your QR code update in real-time in the preview window.
5.  **Download**: Once you're happy, click the "Download QR Code" button. It will save as a PNG image file.

That's it! Simple, fast, and free.
`;

// QR Code Type Examples
const qrTypeExamples = [
  {
    type: "URL",
    example: "Perfect for: Linking to your website or social media profile on business cards, flyers, or posters. For example, a restaurant owner could create a QR code that links to their online menu or reservation page."
  },
  {
    type: "Text",
    example: "Perfect for: Sharing a short message, quote, or instructions. For example, a museum could create QR codes next to exhibits that reveal interesting facts when scanned."
  },
  {
    type: "Wi-Fi",
    example: "Perfect for: Giving guests easy access to your Wi-Fi network without typing passwords. For example, a coffee shop owner could display a QR code that automatically connects customers to their Wi-Fi when scanned."
  },
  {
    type: "Event",
    example: "Perfect for: Sharing event details that can be added to calendars. For example, a wedding invitation could include a QR code that adds the ceremony and reception details to guests' calendars."
  },
  {
    type: "Menu",
    example: "Perfect for: Restaurants wanting to provide a digital menu. For example, a restaurant could place QR codes on tables that link to their up-to-date online menu, reducing the need for printed menus."
  }
];

// FAQ Content
const faqItems = [
  {
    question: "What is a QR code?",
    answer: "A QR (Quick Response) code is a type of barcode that can be scanned using a smartphone camera. It can store various types of information such as URLs, text, contact information, Wi-Fi credentials, and more."
  },
  {
    question: "Are the QR codes generated by QReasy free to use?",
    answer: "Yes, all QR codes generated by QReasy are completely free to use for both personal and commercial purposes. There are no hidden fees or limitations."
  },
  {
    question: "How do I scan a QR code?",
    answer: "Most modern smartphones can scan QR codes directly through their camera app. Simply open your camera, point it at the QR code, and tap on the notification that appears. Some older devices may require a dedicated QR code scanner app."
  },
  {
    question: "Can I customize the appearance of my QR code?",
    answer: "Yes, QReasy allows you to customize the colors of your QR code and add a logo to the center. You can choose from preset color palettes or select custom colors to match your brand or design preferences."
  },
  {
    question: "Will adding a logo affect the scanability of my QR code?",
    answer: "Adding a logo can affect scanability if it covers too much of the QR code. QReasy limits the logo size to ensure your code remains scannable. We recommend testing your QR code on multiple devices after adding a logo to ensure it works properly."
  }
];

// Example Use Cases
const exampleCases = [
  {
    title: "Business Cards",
    description: "Add a QR code to your business card that links to your website, portfolio, or contact information for a modern, interactive touch.",
    image: "/images/business_card_example.jpg"
  },
  {
    title: "Restaurant Menus",
    description: "Create a QR code for your digital menu to provide a contactless experience for your customers.",
    image: "/images/menu_example.jpg"
  },
  {
    title: "Wi-Fi Access",
    description: "Generate a QR code that automatically connects guests to your Wi-Fi network without typing passwords.",
    image: "/images/wifi_example.jpg"
  }
];

const colorPalettes = {
  default: ['#000000', '#FFFFFF', '#4A90E2', '#F5A623', '#D0021B', '#7ED321'],
  vintage: ['#5D4037', '#D7CCC8', '#8D6E63', '#A1887F', '#EFEBE9'],
  ocean: ['#0077B6', '#00B4D8', '#90E0EF', '#CAF0F8', '#ADE8F4'],
  sunset: ['#FF6B6B', '#FFD166', '#06D6A0', '#118AB2', '#073B4C'],
  grayscale: ['#212121', '#616161', '#9E9E9E', '#E0E0E0', '#FAFAFA'],
};

function App() {
  const [qrValue, setQrValue] = useState('https://manus.ai');
  const [qrColor, setQrColor] = useState('#000000');
  const [qrBgColor, setQrBgColor] = useState('#FFFFFF');
  const [qrLogo, setQrLogo] = useState<string>('');
  const [logoSize, setLogoSize] = useState(0.15); // Default logo size
  const [logoNaturalWidth, setLogoNaturalWidth] = useState<number | null>(null);
  const [logoNaturalHeight, setLogoNaturalHeight] = useState<number | null>(null);
  const [qrType, setQrType] = useState('url');

  const [wifiSsid, setWifiSsid] = useState('');
  const [wifiPassword, setWifiPassword] = useState('');
  const [wifiEncryption, setWifiEncryption] = useState('WPA');

  const [eventName, setEventName] = useState('');
  const [eventStartDate, setEventStartDate] = useState('');
  const [eventEndDate, setEventEndDate] = useState('');
  const [eventLocation, setEventLocation] = useState('');
  const [eventDescription, setEventDescription] = useState('');

  const [menuUrl, setMenuUrl] = useState('');
  const [textValue, setTextValue] = useState('');

  const qrRef = useRef<HTMLDivElement>(null);
  const [selectedPalette, setSelectedPalette] = useState<keyof typeof colorPalettes>('default');
  const [expandedFaqIndex, setExpandedFaqIndex] = useState<number | null>(null);

  const handleLogoUpload = (e: React.ChangeEvent<HTMLInputElement>) => {
    if (e.target.files && e.target.files[0]) {
      const file = e.target.files[0];
      const reader = new FileReader();
      reader.onloadend = () => {
        if (typeof reader.result === 'string') {
          setQrLogo(reader.result);
          const img = new Image();
          img.onload = () => {
            setLogoNaturalWidth(img.naturalWidth);
            setLogoNaturalHeight(img.naturalHeight);
          };
          img.src = reader.result;
        }
      };
      reader.readAsDataURL(file);
    }
  };

  const generateQrValue = () => {
    switch (qrType) {
      case 'wifi':
        return `WIFI:S:${wifiSsid};T:${wifiEncryption};P:${wifiPassword};;`;
      case 'event':
        return `BEGIN:VEVENT\nSUMMARY:${eventName}\nDTSTART:${eventStartDate.replace(/-/g, '')}T000000\nDTEND:${eventEndDate.replace(/-/g, '')}T000000\nLOCATION:${eventLocation}\nDESCRIPTION:${eventDescription}\nEND:VEVENT`;
      case 'menu':
        return menuUrl;
      case 'text':
        return textValue;
      case 'url':
      default:
        return qrValue;
    }
  };

  const shareQRCode = async () => {
    const canvas = qrRef.current?.querySelector("canvas");
    if (canvas) {
      try {
        canvas.toBlob(async (blob) => {
          if (blob) {
            const file = new File([blob], "qreasy-code.png", { type: "image/png" });
            if (navigator.share && navigator.canShare && navigator.canShare({ files: [file] })) {
              await navigator.share({
                files: [file],
                title: "My QR Code from QReasy",
                text: "Check out this QR Code I made!",
              });
            } else {
              alert("Web Share API is not supported in your browser, or cannot share files. Please download the QR code to share it.");
              // Fallback: Trigger download if sharing is not possible but was attempted
              downloadQRCode(); 
            }
          }
        }, "image/png");
      } catch (error) {
        console.error("Error sharing QR Code:", error);
        alert("Could not share QR Code. Please try downloading instead.");
      }
    }
  };
  
  const downloadQRCode = () => {
    const canvas = qrRef.current?.querySelector('canvas');
    if (canvas) {
      const pngUrl = canvas
        .toDataURL('image/png')
        .replace('image/png', 'image/octet-stream');
      let downloadLink = document.createElement('a');
      downloadLink.href = pngUrl;
      downloadLink.download = 'qreasy-code.png';
      document.body.appendChild(downloadLink);
      downloadLink.click();
      document.body.removeChild(downloadLink);
    }
  };

  const currentQrValue = generateQrValue();

  const renderMarkdown = (markdown: string, isNumberedList = false) => {
    let html = '';
    const lines = markdown.split('\n');

    let inOl = false;
    let inNestedOl = false;

    for (let i = 0; i < lines.length; i++) {
      let line = lines[i];

      // Pre-process for bold and br tags universally
      line = line.replace(/\*\*([^*]+)\*\*/g, '<strong>$1</strong>');
      line = line.replace(/<br \/>/g, '<br />');

      if (line.match(/^### (.*)/)) {
        if (inNestedOl) { html += '</ol></li>'; inNestedOl = false; }
        if (inOl) { html += '</li></ol>'; inOl = false; }
        html += line.replace(/^### (.*)/, '<h3>$1</h3>');
      } else if (isNumberedList && line.match(/^\d+\.\s+.*/)) { // Main list item
        if (inNestedOl) { html += '</ol></li>'; inNestedOl = false; } // Close nested list if open
        if (!inOl) { html += '<ol>'; inOl = true; }
        else { html += '</li>'; } // Close previous main li
        html += `<li>${line.replace(/^\d+\.\s+/, '')}`;
      } else if (isNumberedList && line.match(/^\s{4}\d+\.\s+.*/)) { // Nested list item
        if (!inNestedOl) {
          html += '<ol style="margin-left: 20px; margin-top: 5px;">';
          inNestedOl = true;
        } else {
          html += '</li>'; // Close previous nested li
        }
        html += `<li>${line.replace(/^\s{4}\d+\.\s+/, '')}`;
      } else { // Plain text or non-list items
        if (line.trim() !== '') { // Only close lists if the line has content and is not part of list continuation
          if (inNestedOl) { html += '</ol></li>'; inNestedOl = false; }
          if (inOl) { html += '</li></ol>'; inOl = false; }
        }
        html += line;
      }
      if (i < lines.length - 1 || (i === lines.length -1 && line.trim() !== '')) { // Add newline if not the truly last empty line
          html += '\n';
      }
    }

    // Close any open lists at the end
    if (inNestedOl) { html += '</ol></li>'; }
    if (inOl) { html += '</li></ol>'; }

    return { __html: html.trim() }; // Trim to remove any leading/trailing whitespace including newlines from the final HTML string
  };
    
  const getLogoDimensions = () => {
    if (!qrLogo || !logoNaturalWidth || !logoNaturalHeight) {
      return { width: 0, height: 0 };
    }
    const qrCanvasSize = 256;
    const maxLogoDimension = qrCanvasSize * logoSize;
    let width, height;

    if (logoNaturalWidth > logoNaturalHeight) {
      width = maxLogoDimension;
      height = (logoNaturalHeight / logoNaturalWidth) * maxLogoDimension;
    } else {
      height = maxLogoDimension;
      width = (logoNaturalWidth / logoNaturalHeight) * maxLogoDimension;
    }
    return { width, height };
  };

  const logoDimensions = getLogoDimensions();

  const ColorPaletteChooser = ({ setColor }: { setColor: (color: string) => void }) => (
    <div className="palette-chooser">
      <label>Choose from Palette:</label>
      <select onChange={(e) => setSelectedPalette(e.target.value as keyof typeof colorPalettes)} value={selectedPalette} className="palette-select">
        {Object.keys(colorPalettes).map(name => (
          <option key={name} value={name}>{name.charAt(0).toUpperCase() + name.slice(1)}</option>
        ))}
      </select>
      <div className="color-swatches">
        {colorPalettes[selectedPalette].map(color => (
          <div 
            key={color} 
            className="color-swatch"
            style={{ backgroundColor: color }}
            onClick={() => setColor(color)}
            title={color}
          />
        ))}
      </div>
    </div>
  );

  const toggleFaq = (index: number) => {
    setExpandedFaqIndex(expandedFaqIndex === index ? null : index);
  };

  return (
    <div className="App">
      <header className="App-header">
        <h1>QReasy: Free QR Code Generator</h1>
        <p>Create custom QR codes for free. User-friendly and privacy-focused.</p>
      </header>

      {/* Intro Section */}
      <section className="intro-section-container">
        <div className="intro-text">
          <h2>Our Free and Easy QR Code Generator</h2>
          <p>Reach new clients with a free QR code. Ideal for marketing and sales teams. You can use it for accessing your contact details, your website, your event, your menu, your wi-fi code.</p>
        </div>
        <div className="intro-image">
          <img src="/images/mobile_qr_intro.jpeg" alt="Mobile phone creating a QR code" />
        </div>
      </section>

      {/* Customize Section */}
      <section className="section-container">
        <div className="section-inner">
          <div className="section-header">
            <h2>Create Your QR Code</h2>
            <p>Customize your QR code to match your brand and needs. Choose from different types, colors, and add your logo.</p>
          </div>
          
          <div className="customize-section">
            <div className="controls-preview-container">
              {/* Controls */}
              <div className="controls">
                <div className="control-group">
                  <label htmlFor="qrType">QR Code Type:</label>
                  <select id="qrType" value={qrType} onChange={(e) => setQrType(e.target.value)}>
                    <option value="url">URL</option>
                    <option value="text">Text</option>
                    <option value="wifi">Wi-Fi</option>
                    <option value="event">Event (Basic)</option>
                    <option value="menu">Menu (URL)</option>
                  </select>
                </div>

                {qrType === 'url' && (
                  <div className="control-group">
                    <label htmlFor="qrValue">Website URL:</label>
                    <input 
                      type="text" 
                      id="qrValue" 
                      value={qrValue} 
                      onChange={(e) => setQrValue(e.target.value)} 
                      placeholder="e.g., https://www.example.com"
                    />
                  </div>
                )}

                {qrType === 'text' && (
                  <div className="control-group">
                    <label htmlFor="textValue">Text:</label>
                    <textarea 
                      id="textValue" 
                      value={textValue} 
                      onChange={(e) => setTextValue(e.target.value)} 
                      placeholder="Enter your text here"
                    />
                  </div>
                )}

                {qrType === 'wifi' && (
                  <>
                    <div className="control-group">
                      <label htmlFor="wifiSsid">Network Name (SSID):</label>
                      <input type="text" id="wifiSsid" value={wifiSsid} onChange={(e) => setWifiSsid(e.target.value)} />
                    </div>
                    <div className="control-group">
                      <label htmlFor="wifiPassword">Password:</label>
                      <input type="password" id="wifiPassword" value={wifiPassword} onChange={(e) => setWifiPassword(e.target.value)} />
                    </div>
                    <div className="control-group">
                      <label htmlFor="wifiEncryption">Encryption:</label>
                      <select id="wifiEncryption" value={wifiEncryption} onChange={(e) => setWifiEncryption(e.target.value)}>
                        <option value="WPA">WPA/WPA2</option>
                        <option value="WEP">WEP</option>
                        <option value="nopass">None</option>
                      </select>
                    </div>
                  </>
                )}

                {qrType === 'event' && (
                  <>
                    <div className="control-group">
                      <label htmlFor="eventName">Event Name:</label>
                      <input type="text" id="eventName" value={eventName} onChange={(e) => setEventName(e.target.value)} />
                    </div>
                    <div className="control-group">
                      <label htmlFor="eventStartDate">Start Date (YYYY-MM-DD):</label>
                      <input type="date" id="eventStartDate" value={eventStartDate} onChange={(e) => setEventStartDate(e.target.value)} />
                    </div>
                    <div className="control-group">
                      <label htmlFor="eventEndDate">End Date (YYYY-MM-DD):</label>
                      <input type="date" id="eventEndDate" value={eventEndDate} onChange={(e) => setEventEndDate(e.target.value)} />
                    </div>
                    <div className="control-group">
                      <label htmlFor="eventLocation">Location:</label>
                      <input type="text" id="eventLocation" value={eventLocation} onChange={(e) => setEventLocation(e.target.value)} />
                    </div>
                    <div className="control-group">
                      <label htmlFor="eventDescription">Description:</label>
                      <textarea id="eventDescription" value={eventDescription} onChange={(e) => setEventDescription(e.target.value)} />
                    </div>
                  </>
                )}

                {qrType === 'menu' && (
                  <div className="control-group">
                    <label htmlFor="menuUrl">Menu URL:</label>
                    <input type="text" id="menuUrl" value={menuUrl} onChange={(e) => setMenuUrl(e.target.value)} placeholder="e.g., https://www.restaurant.com/menu" />
                  </div>
                )}

                <div className="control-group">
                  <label htmlFor="qrColor">QR Code Color (Custom):</label>
                  <input type="color" id="qrColor" value={qrColor} onChange={(e) => setQrColor(e.target.value)} />
                  <ColorPaletteChooser setColor={setQrColor} />
                </div>
                <div className="control-group">
                  <label htmlFor="qrBgColor">Background Color (Custom):</label>
                  <input type="color" id="qrBgColor" value={qrBgColor} onChange={(e) => setQrBgColor(e.target.value)} />
                  <ColorPaletteChooser setColor={setQrBgColor} />
                </div>
                <div className="control-group">
                  <label htmlFor="qrLogo">Upload Logo (optional):</label>
                  <input type="file" id="qrLogo" accept="image/*" onChange={handleLogoUpload} />
                </div>
                {qrLogo && (
                  <div className="control-group">
                    <label htmlFor="logoSize">Logo Size (Max 10% to 30% of QR Area):</label>
                    <input 
                      type="range" 
                      id="logoSize" 
                      min="0.1" 
                      max="0.3" 
                      step="0.01" 
                      value={logoSize} 
                      onChange={(e) => setLogoSize(parseFloat(e.target.value))} 
                    />
                  </div>
                )}
              </div>

              {/* Preview */}
              <div className="preview">
                <h3>QR Code Preview</h3>
                <div className="qr-preview-container" ref={qrRef}>
                  <QRCodeCanvas
                    value={currentQrValue}
                    size={256}
                    bgColor={qrBgColor}
                    fgColor={qrColor}
                    level="H"
                    includeMargin={true}
                    imageSettings={
                      qrLogo
                        ? {
                            src: qrLogo,
                            x: undefined,
                            y: undefined,
                            height: logoDimensions.height,
                            width: logoDimensions.width,
                            excavate: true,
                          }
                        : undefined
                    }
                  />
                  <div className="action-buttons">
                    <button onClick={downloadQRCode} className="download-btn">Download QR Code</button>
                    <button onClick={shareQRCode} className="share-btn">Share QR Code</button>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>
      </section>

      {/* How to Use Section */}
      <section className="section-container">
        <div className="section-inner">
          <div className="section-header">
            <h2>How to Use QReasy</h2>
            <p>Follow these simple steps to create and use your custom QR code.</p>
          </div>
          <div className="guide-section" dangerouslySetInnerHTML={renderMarkdown(howToUseContent, true)} />
          
          {/* QR Code Type Examples */}
          <div className="guide-section" style={{ marginTop: '30px' }}>
            <h3>When to Use Each QR Code Type</h3>
            <div style={{ marginTop: '20px' }}>
              {qrTypeExamples.map((item, index) => (
                <div key={index} style={{ marginBottom: '20px' }}>
                  <h4 style={{ color: 'var(--primary-color)', marginBottom: '8px' }}>{item.type}</h4>
                  <p>{item.example}</p>
                </div>
              ))}
            </div>
          </div>
        </div>
      </section>

      {/* Examples Section */}
      <section className="section-container examples-section">
        <div className="section-inner">
          <div className="section-header">
            <h2>QR Codes in Action</h2>
            <p>Discover creative ways to use QR codes in your business or personal projects.</p>
          </div>
          <div className="examples-grid">
            {exampleCases.map((example, index) => (
              <div className="example-card" key={index}>
                <img src={example.image} alt={example.title} />
                <div className="example-card-content">
                  <h3>{example.title}</h3>
                  <p>{example.description}</p>
                </div>
              </div>
            ))}
          </div>
        </div>
      </section>

      {/* FAQ Section */}
      <section className="section-container">
        <div className="section-inner">
          <div className="section-header">
            <h2>Your Questions, Answered</h2>
            <p>Find answers to commonly asked questions about QR codes and our generator.</p>
          </div>
          <div className="faq-section-container">
            {faqItems.map((item, index) => (
              <div key={index}>
                <div 
                  className="faq-header" 
                  onClick={() => toggleFaq(index)}
                >
                  <h3>{item.question}</h3>
                  <div className={`faq-toggle-icon ${expandedFaqIndex === index ? 'open' : ''}`}>
                    ▼
                  </div>
                </div>
                <div className={`faq-content ${expandedFaqIndex === index ? 'open' : ''}`}>
                  <div className="faq-items">
                    <div className="faq-item">
                      <p>{item.answer}</p>
                    </div>
                  </div>
                </div>
              </div>
            ))}
          </div>
        </div>
      </section>

      {/* Footer */}
      <footer className="footer">
        <p>© {new Date().getFullYear()} QReasy - Free QR Code Generator. All rights reserved.</p>
        <p>Created with ❤️ for all your QR code needs.</p>
      </footer>
    </div>
  );
}

export default App;
