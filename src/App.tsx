import { useState, useRef, ChangeEvent, ReactNode } from 'react';
import { QRCodeCanvas } from 'qrcode.react';
import './App.css';

// Content for How to Use
const howToUseContent = `
### How to Use Freebee QR:

1.  **Select QR Type**: Choose the type of QR code you want to create from the dropdown menu (e.g., URL, Text, Wi-Fi, Event, Menu).
2.  **Enter Your Data**: Fill in the required information for your chosen QR code type in the fields that appear.
3.  **Customize (Optional)**: 
    1.  Pick a color for your QR code (use a preset palette or choose a custom color).
    2.  Choose a background color (use a preset palette or choose a custom color).
    3.  Upload a logo to embed in the center (make sure it's clear and not too complex!).
    4.  Adjust the logo size using the slider.
4.  **Preview**: See your QR code update in real-time in the preview window.
5.  **Download**: Once you're happy, click the "Download QR Code" button. It will save as a PNG image file.

That's it! Simple, fast, and free.
`;

// FAQ Content
const faqItems = [
  {
    question: "What is a QR code?",
    answer: "A QR (Quick Response) code is a type of barcode that can be scanned using a smartphone camera. It can store various types of information such as URLs, text, contact information, Wi-Fi credentials, and more."
  },
  {
    question: "Are the QR codes generated by Freebee QR free to use?",
    answer: "Yes, all QR codes generated by Freebee QR are completely free to use for both personal and commercial purposes. There are no hidden fees or limitations."
  },
  {
    question: "How do I scan a QR code?",
    answer: "Most modern smartphones can scan QR codes directly through their camera app. Simply open your camera, point it at the QR code, and tap on the notification that appears. Some older devices may require a dedicated QR code scanner app."
  },
  {
    question: "Can I customize the appearance of my QR code?",
    answer: "Yes, Freebee QR allows you to customize the colors of your QR code and add a logo to the center. You can choose from preset color palettes or select custom colors to match your brand or design preferences."
  },
  {
    question: "Will adding a logo affect the scanability of my QR code?",
    answer: "Adding a logo can affect scanability if it covers too much of the QR code. Freebee QR limits the logo size to ensure your code remains scannable. We recommend testing your QR code on multiple devices after adding a logo to ensure it works properly."
  }
];

// Example Use Cases
const exampleCases = [
  {
    title: "Business Cards",
    description: "Add a QR code to your business card that links to your website, portfolio, or contact information for a modern, interactive touch.",
    image: "/images/business_card_example.jpg"
  },
  {
    title: "Restaurant Menus",
    description: "Create a QR code for your digital menu to provide a contactless experience for your customers.",
    image: "/images/menu_example.jpg"
  },
  {
    title: "Wi-Fi Access",
    description: "Generate a QR code that automatically connects guests to your Wi-Fi network without typing passwords.",
    image: "/images/wifi_example.jpg"
  }
];

// Define color palettes with proper typing
type ColorPalettes = {
  [key: string]: string[];
};

const colorPalettes: ColorPalettes = {
  default: ['#000000', '#FFFFFF', '#4A90E2', '#F5A623', '#D0021B', '#7ED321'],
  vintage: ['#5D4037', '#D7CCC8', '#8D6E63', '#A1887F', '#EFEBE9'],
  ocean: ['#0077B6', '#00B4D8', '#90E0EF', '#CAF0F8', '#ADE8F4'],
  sunset: ['#FF6B6B', '#FFD166', '#06D6A0', '#118AB2', '#073B4C'],
  grayscale: ['#212121', '#616161', '#9E9E9E', '#E0E0E0', '#FAFAFA'],
};

function App() {
  const [qrValue, setQrValue] = useState<string>('https://manus.ai');
  const [qrColor, setQrColor] = useState<string>('#000000');
  const [qrBgColor, setQrBgColor] = useState<string>('#FFFFFF');
  const qrSize = 200; // Fixed size, no need for state
  const [qrType, setQrType] = useState<string>('url');
  const [textValue, setTextValue] = useState<string>('Hello, this is a text QR code!');
  const [wifiSsid, setWifiSsid] = useState<string>('');
  const [wifiPassword, setWifiPassword] = useState<string>('');
  const [wifiEncryption, setWifiEncryption] = useState<string>('WPA');
  const [eventName, setEventName] = useState<string>('');
  const [eventStartDate, setEventStartDate] = useState<string>('');
  const [eventEndDate, setEventEndDate] = useState<string>('');
  const [eventLocation, setEventLocation] = useState<string>('');
  const [menuUrl, setMenuUrl] = useState<string>('https://example.com/menu');
  const [logoFile, setLogoFile] = useState<string | null>(null);
  const [logoSize, setLogoSize] = useState<number>(30);
  const [selectedPalette, setSelectedPalette] = useState<string>('default');
  const [activeFaq, setActiveFaq] = useState<number | null>(null);
  const qrRef = useRef<HTMLDivElement>(null);

  // Function to handle QR code download
  const handleDownload = () => {
    if (qrRef.current) {
      const canvas = qrRef.current.querySelector('canvas');
      if (canvas) {
        const url = canvas.toDataURL('image/png');
        const link = document.createElement('a');
        link.href = url;
        link.download = `qr-code-${qrType}.png`;
        document.body.appendChild(link);
        link.click();
        document.body.removeChild(link);
      }
    }
  };

  // Function to handle logo file upload
  const handleLogoUpload = (e: ChangeEvent<HTMLInputElement>) => {
    const file = e.target.files?.[0];
    if (file) {
      const reader = new FileReader();
      reader.onload = (event: ProgressEvent<FileReader>) => {
        if (event.target?.result) {
          setLogoFile(event.target.result as string);
        }
      };
      reader.readAsDataURL(file);
    }
  };

  // Function to generate QR code value based on type
  const generateQrValue = (): string => {
    switch (qrType) {
      case 'url':
        return qrValue;
      case 'text':
        return textValue;
      case 'wifi':
        return `WIFI:T:${wifiEncryption};S:${wifiSsid};P:${wifiPassword};;`;
      case 'event':
        return `BEGIN:VEVENT\nSUMMARY:${eventName}\nDTSTART:${eventStartDate.replace(/-/g, '')}\nDTEND:${eventEndDate.replace(/-/g, '')}\nLOCATION:${eventLocation}\nEND:VEVENT`;
      case 'menu':
        return menuUrl;
      default:
        return qrValue;
    }
  };

  // Function to toggle FAQ items
  const toggleFaq = (index: number) => {
    setActiveFaq(activeFaq === index ? null : index);
  };

  // Function to render markdown content
  const renderMarkdown = (markdown: string): ReactNode[] => {
    const lines = markdown.split('\n');
    const result: ReactNode[] = [];
    
    for (let i = 0; i < lines.length; i++) {
      const line = lines[i];
      
      if (line.startsWith('###')) {
        result.push(<h3 key={i} style={{color: '#046dc8', fontWeight: 'bold'}}>{line.replace('###', '').trim()}</h3>);
      } else if (line.startsWith('1.') || line.startsWith('2.') || line.startsWith('3.') || line.startsWith('4.') || line.startsWith('5.')) {
        // Start of a numbered list
        const listItems: ReactNode[] = [];
        let j = i;
        
        while (j < lines.length && (lines[j].match(/^\d+\./) || lines[j].startsWith('    '))) {
          if (lines[j].match(/^\d+\./)) {
            // Main list item
            const content = lines[j].replace(/^\d+\./, '').trim();
            
            // Check if this item has sub-items
            if (j + 1 < lines.length && lines[j + 1].startsWith('    ')) {
              const subItems: ReactNode[] = [];
              j++;
              
              while (j < lines.length && lines[j].startsWith('    ')) {
                if (lines[j].match(/\s+\d+\./)) {
                  // Numbered sub-item
                  const subContent = lines[j].replace(/\s+\d+\./, '').trim();
                  subItems.push(<li key={`${i}-${j}`}>{subContent}</li>);
                }
                j++;
              }
              
              listItems.push(
                <li key={i}>
                  {content}
                  <ol>{subItems}</ol>
                </li>
              );
              j--; // Adjust for the outer loop increment
            } else {
              // Simple list item without sub-items
              listItems.push(<li key={`${i}-${j}`}>{content}</li>);
            }
          }
          j++;
        }
        
        result.push(<ol key={`list-${i}`}>{listItems}</ol>);
        i = j - 1; // Adjust the outer loop counter
      } else if (line.trim() !== '') {
        result.push(<p key={i}>{line}</p>);
      }
    }
    
    return result;
  };

  return (
    <div className="App">
      <header className="App-header">
        <h1>Freebee QR: Free QR Code Generator</h1>
        <p>Create custom QR codes for free. User-friendly and privacy-focused.</p>
      </header>

      {/* Intro Section */}
      <section className="intro-section-container">
        <div className="intro-text">
          <h2>Our Free and Easy QR Code Generator</h2>
          <p>Reach new clients with a free QR code. Ideal for marketing and sales teams. You can use it for accessing your contact details, your website, your event, your menu, your wi-fi code.</p>
        </div>
        <div className="intro-image">
          <img src="/images/mobile_qr_intro.jpeg" alt="Mobile phone creating a QR code" />
        </div>
      </section>

      {/* Customize Section */}
      <section className="section-container">
        <div className="section-inner">
          <div className="section-header">
            <h2>Create Your QR Code</h2>
            <p>Customize your QR code to match your brand and needs. Choose from different types, colors, and add your logo.</p>
          </div>
          
          <div className="customize-section">
            <div className="controls-preview-container">
              {/* Controls */}
              <div className="controls">
                <div className="control-group">
                  <label htmlFor="qrType">QR Code Type:</label>
                  <select id="qrType" value={qrType} onChange={(e) => setQrType(e.target.value)}>
                    <option value="url">URL</option>
                    <option value="text">Text</option>
                    <option value="wifi">Wi-Fi</option>
                    <option value="event">Event (Basic)</option>
                    <option value="menu">Menu (URL)</option>
                  </select>
                </div>

                {qrType === 'url' && (
                  <div className="control-group">
                    <label htmlFor="qrValue">
                      <div className="qr-type-option">
                        <img src="/icons/url_icon.png" alt="URL" className="qr-type-icon" /> Website URL:
                      </div>
                    </label>
                    <input 
                      type="text" 
                      id="qrValue" 
                      value={qrValue} 
                      onChange={(e) => setQrValue(e.target.value)} 
                      placeholder="e.g., https://www.example.com"
                    />
                  </div>
                )}

                {qrType === 'text' && (
                  <div className="control-group">
                    <label htmlFor="textValue">
                      <div className="qr-type-option">
                        <img src="/icons/text_icon.png" alt="Text" className="qr-type-icon" /> Text:
                      </div>
                    </label>
                    <textarea 
                      id="textValue" 
                      value={textValue} 
                      onChange={(e) => setTextValue(e.target.value)} 
                      placeholder="Enter your text here"
                    />
                  </div>
                )}

                {qrType === 'wifi' && (
                  <>
                    <div className="control-group">
                      <label htmlFor="wifiSsid">
                        <div className="qr-type-option">
                          <img src="/icons/wifi_icon.png" alt="Wi-Fi" className="qr-type-icon" /> Network Name (SSID):
                        </div>
                      </label>
                      <input type="text" id="wifiSsid" value={wifiSsid} onChange={(e) => setWifiSsid(e.target.value)} />
                    </div>
                    <div className="control-group">
                      <label htmlFor="wifiPassword">Password:</label>
                      <input type="password" id="wifiPassword" value={wifiPassword} onChange={(e) => setWifiPassword(e.target.value)} />
                    </div>
                    <div className="control-group">
                      <label htmlFor="wifiEncryption">Encryption:</label>
                      <select id="wifiEncryption" value={wifiEncryption} onChange={(e) => setWifiEncryption(e.target.value)}>
                        <option value="WPA">WPA/WPA2</option>
                        <option value="WEP">WEP</option>
                        <option value="nopass">None</option>
                      </select>
                    </div>
                  </>
                )}

                {qrType === 'event' && (
                  <>
                    <div className="control-group">
                      <label htmlFor="eventName">
                        <div className="qr-type-option">
                          <img src="/icons/event_icon.png" alt="Event" className="qr-type-icon" /> Event Name:
                        </div>
                      </label>
                      <input type="text" id="eventName" value={eventName} onChange={(e) => setEventName(e.target.value)} />
                    </div>
                    <div className="control-group">
                      <label htmlFor="eventStartDate">Start Date (YYYY-MM-DD):</label>
                      <input type="date" id="eventStartDate" value={eventStartDate} onChange={(e) => setEventStartDate(e.target.value)} />
                    </div>
                    <div className="control-group">
                      <label htmlFor="eventEndDate">End Date (YYYY-MM-DD):</label>
                      <input type="date" id="eventEndDate" value={eventEndDate} onChange={(e) => setEventEndDate(e.target.value)} />
                    </div>
                    <div className="control-group">
                      <label htmlFor="eventLocation">Location:</label>
                      <input type="text" id="eventLocation" value={eventLocation} onChange={(e) => setEventLocation(e.target.value)} />
                    </div>
                  </>
                )}

                {qrType === 'menu' && (
                  <div className="control-group">
                    <label htmlFor="menuUrl">
                      <div className="qr-type-option">
                        <img src="/icons/menu_icon.png" alt="Menu" className="qr-type-icon" /> Menu URL:
                      </div>
                    </label>
                    <input type="text" id="menuUrl" value={menuUrl} onChange={(e) => setMenuUrl(e.target.value)} placeholder="e.g., https://example.com/menu" />
                  </div>
                )}

                <div className="control-group">
                  <label htmlFor="qrColor">QR Code Color:</label>
                  <div className="palette-chooser">
                    <select 
                      className="palette-select"
                      value={selectedPalette}
                      onChange={(e) => setSelectedPalette(e.target.value)}
                    >
                      <option value="default">Default</option>
                      <option value="vintage">Vintage</option>
                      <option value="ocean">Ocean</option>
                      <option value="sunset">Sunset</option>
                      <option value="grayscale">Grayscale</option>
                    </select>
                    <div className="color-swatches">
                      {colorPalettes[selectedPalette].map((color, index) => (
                        <div 
                          key={index}
                          className="color-swatch"
                          style={{ backgroundColor: color }}
                          onClick={() => setQrColor(color)}
                          title={color}
                        />
                      ))}
                    </div>
                  </div>
                  <input 
                    type="color" 
                    id="qrColor" 
                    value={qrColor} 
                    onChange={(e) => setQrColor(e.target.value)} 
                  />
                </div>

                <div className="control-group">
                  <label htmlFor="qrBgColor">Background Color:</label>
                  <input 
                    type="color" 
                    id="qrBgColor" 
                    value={qrBgColor} 
                    onChange={(e) => setQrBgColor(e.target.value)} 
                  />
                </div>

                <div className="control-group">
                  <label htmlFor="logoUpload">Add Logo (Optional):</label>
                  <input 
                    type="file" 
                    id="logoUpload" 
                    accept="image/*" 
                    onChange={handleLogoUpload} 
                  />
                </div>

                {logoFile && (
                  <div className="control-group">
                    <label htmlFor="logoSize">Logo Size: {logoSize}%</label>
                    <input 
                      type="range" 
                      id="logoSize" 
                      min="5" 
                      max="30" 
                      value={logoSize} 
                      onChange={(e) => setLogoSize(parseInt(e.target.value))} 
                    />
                  </div>
                )}
              </div>

              {/* Preview */}
              <div className="preview">
                <h3>Preview</h3>
                <div className="qr-preview-container" ref={qrRef}>
                  <QRCodeCanvas 
                    value={generateQrValue()}
                    size={qrSize}
                    bgColor={qrBgColor}
                    fgColor={qrColor}
                    level="H"
                    imageSettings={
                      logoFile 
                        ? {
                            src: logoFile,
                            excavate: true,
                            width: qrSize * (logoSize / 100),
                            height: qrSize * (logoSize / 100),
                          } 
                        : undefined
                    }
                  />
                </div>
                <div className="action-buttons">
                  <button className="download-btn" onClick={handleDownload}>Download QR Code</button>
                </div>
              </div>
            </div>
          </div>
        </div>
      </section>

      {/* How to Use Section */}
      <section className="section-container">
        <div className="section-inner">
          <div className="section-header">
            <h2>How to Use</h2>
            <p>Follow these simple steps to create and use your QR code.</p>
          </div>
          <div className="guide-section">
            {renderMarkdown(howToUseContent)}
          </div>
        </div>
      </section>

      {/* Examples Section */}
      <section className="section-container examples-section">
        <div className="section-inner">
          <div className="section-header">
            <h2>QR Codes in Action</h2>
            <p>Discover how QR codes can enhance your business or personal projects.</p>
          </div>
          <div className="examples-grid">
            {exampleCases.map((example, index) => (
              <div className="example-card" key={index}>
                <img src={example.image} alt={example.title} />
                <div className="example-card-content">
                  <h3>{example.title}</h3>
                  <p>{example.description}</p>
                </div>
              </div>
            ))}
          </div>
        </div>
      </section>

      {/* FAQ Section */}
      <section className="section-container">
        <div className="section-inner">
          <div className="section-header">
            <h2>Frequently Asked Questions</h2>
            <p>Find answers to common questions about QR codes and our generator.</p>
          </div>
          <div className="faq-section-container">
            {faqItems.map((faq, index) => (
              <div className="faq-item" key={index}>
                <div 
                  className="faq-header" 
                  onClick={() => toggleFaq(index)}
                >
                  <h3>{faq.question}</h3>
                  <div className={`faq-toggle-icon ${activeFaq === index ? 'open' : ''}`}>
                    ▼
                  </div>
                </div>
                <div className={`faq-content ${activeFaq === index ? 'open' : ''}`}>
                  <p>{faq.answer}</p>
                </div>
              </div>
            ))}
          </div>
        </div>
      </section>

      <footer className="footer">
        <p>© {new Date().getFullYear()} Freebee QR - Free QR Code Generator. All rights reserved.</p>
        <p>Created with ❤️ by Freebee QR Team</p>
      </footer>
    </div>
  );
}

export default App;
